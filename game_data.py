# -*- coding: utf-8 -*-
"""game_data.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jxsSwQ47ulrGJio6vkAZxbEVZQXCxKjQ
"""

!pip install python-chess
!pip install stockfish

import chess
import chess.engine
import numpy as np
import pandas as pd
from stockfish import Stockfish

stockfish = Stockfish(path="stockfish")

data = []

def board_to_vector(board_state):
    board_vector = np.zeros(64)
    moves = board_state.split('')
    board = chess.Board()

    for move in moves:
        if chess.Move.from_uci(move) in board.legal_moves:
            board.push(chess.Move.from_uci(move))

    for i in range(64):
        piece = board.piece_at(i)
        if piece is not None:
            piece_type = piece.piece_type
            color = piece.color
            board_vector[i] = piece_type + (6 if color == chess.WHITE else 0)
    return board_vector

csv_file_path = "chess_game_data.csv"

def collect_game_data(board, human_move, robot_move, game_result):
    board_vector = board_to_vector(board)

    evaluation = engine.analyse(board, chess.engine.Limit(time=1.0))
    human_move_quality = evaluation['score'].relative.score(mate_score=10000)

    move_data = {
        "board_state": board_vector,
        "human_move": human_move.uci(),
        "robot_move": robot_move.uci(),
        "outcome": game_result,
        "human_move_quality": human_move_quality
    }

df = pd.DataFrame(move_data)

df.to_csv(csv_file_path, mode='a', header=not pd.io.common.file_exists(csv_file_path), index=False)